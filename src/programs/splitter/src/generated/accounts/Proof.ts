/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { DataVersion, dataVersionBeet } from '../types/DataVersion'

/**
 * Arguments used to create {@link Proof}
 * @category Accounts
 * @category generated
 */
export type ProofArgs = {
  dataVersion: DataVersion
  pool: web3.PublicKey
  poolBump: number
  merkleRoot: number[] /* size: 32 */
  commitment: web3.PublicKey
  verified: boolean
  size: number
  data: number[] /* size: 32 */[]
}

const proofDiscriminator = [163, 35, 13, 71, 15, 128, 63, 82]
/**
 * Holds the data for the {@link Proof} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Proof implements ProofArgs {
  private constructor(
    readonly dataVersion: DataVersion,
    readonly pool: web3.PublicKey,
    readonly poolBump: number,
    readonly merkleRoot: number[] /* size: 32 */,
    readonly commitment: web3.PublicKey,
    readonly verified: boolean,
    readonly size: number,
    readonly data: number[] /* size: 32 */[]
  ) {}

  /**
   * Creates a {@link Proof} instance from the provided args.
   */
  static fromArgs(args: ProofArgs) {
    return new Proof(
      args.dataVersion,
      args.pool,
      args.poolBump,
      args.merkleRoot,
      args.commitment,
      args.verified,
      args.size,
      args.data
    )
  }

  /**
   * Deserializes the {@link Proof} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Proof, number] {
    return Proof.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Proof} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<Proof> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find Proof account at ${address}`)
    }
    return Proof.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link Proof} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Proof, number] {
    return proofBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Proof} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return proofBeet.serialize({
      accountDiscriminator: proofDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Proof} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProofArgs) {
    const instance = Proof.fromArgs(args)
    return proofBeet.toFixedFromValue({
      accountDiscriminator: proofDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Proof} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProofArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Proof.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Proof} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      dataVersion: 'DataVersion.' + DataVersion[this.dataVersion],
      pool: this.pool.toBase58(),
      poolBump: this.poolBump,
      merkleRoot: this.merkleRoot,
      commitment: this.commitment.toBase58(),
      verified: this.verified,
      size: this.size,
      data: this.data,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const proofBeet = new beet.FixableBeetStruct<
  Proof,
  ProofArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['dataVersion', dataVersionBeet],
    ['pool', beetSolana.publicKey],
    ['poolBump', beet.u8],
    ['merkleRoot', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['commitment', beetSolana.publicKey],
    ['verified', beet.bool],
    ['size', beet.u8],
    ['data', beet.array(beet.uniformFixedSizeArray(beet.u8, 32))],
  ],
  Proof.fromArgs,
  'Proof'
)
