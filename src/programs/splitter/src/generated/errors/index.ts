/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidPoolState: 'Invalid pool state for this instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPoolStateError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidPoolState'
  constructor() {
    super('Invalid pool state for this instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPoolStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidPoolStateError())
createErrorFromNameLookup.set(
  'InvalidPoolState',
  () => new InvalidPoolStateError()
)

/**
 * InvalidCommitmentState: 'Invalid commitment state for this instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCommitmentStateError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidCommitmentState'
  constructor() {
    super('Invalid commitment state for this instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCommitmentStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidCommitmentStateError())
createErrorFromNameLookup.set(
  'InvalidCommitmentState',
  () => new InvalidCommitmentStateError()
)

/**
 * InvalidRecentRoot: 'Invalid recent root value'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRecentRootError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidRecentRoot'
  constructor() {
    super('Invalid recent root value')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRecentRootError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidRecentRootError())
createErrorFromNameLookup.set(
  'InvalidRecentRoot',
  () => new InvalidRecentRootError()
)

/**
 * InvalidVaultAccount: 'Invalid token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVaultAccountError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidVaultAccount'
  constructor() {
    super('Invalid token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVaultAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidVaultAccountError())
createErrorFromNameLookup.set(
  'InvalidVaultAccount',
  () => new InvalidVaultAccountError()
)

/**
 * InsufficientVaultBalance: 'Insufficient vault funds'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientVaultBalanceError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InsufficientVaultBalance'
  constructor() {
    super('Insufficient vault funds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientVaultBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InsufficientVaultBalanceError())
createErrorFromNameLookup.set(
  'InsufficientVaultBalance',
  () => new InsufficientVaultBalanceError()
)

/**
 * InvalidAuthority: 'Invalid authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * InvalidVaultOwner: 'Invalid vault owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVaultOwnerError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidVaultOwner'
  constructor() {
    super('Invalid vault owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVaultOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidVaultOwnerError())
createErrorFromNameLookup.set(
  'InvalidVaultOwner',
  () => new InvalidVaultOwnerError()
)

/**
 * MerkleTreeFull: 'Merkle tree full'
 *
 * @category Errors
 * @category generated
 */
export class MerkleTreeFullError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'MerkleTreeFull'
  constructor() {
    super('Merkle tree full')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleTreeFullError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new MerkleTreeFullError())
createErrorFromNameLookup.set('MerkleTreeFull', () => new MerkleTreeFullError())

/**
 * InvalidMerkleTreeDepth: 'Invalid merkle tree depth'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMerkleTreeDepthError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidMerkleTreeDepth'
  constructor() {
    super('Invalid merkle tree depth')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMerkleTreeDepthError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidMerkleTreeDepthError())
createErrorFromNameLookup.set(
  'InvalidMerkleTreeDepth',
  () => new InvalidMerkleTreeDepthError()
)

/**
 * ProofAlreadyVerified: 'Proof already verified'
 *
 * @category Errors
 * @category generated
 */
export class ProofAlreadyVerifiedError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'ProofAlreadyVerified'
  constructor() {
    super('Proof already verified')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProofAlreadyVerifiedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new ProofAlreadyVerifiedError())
createErrorFromNameLookup.set(
  'ProofAlreadyVerified',
  () => new ProofAlreadyVerifiedError()
)

/**
 * ProofNotVerified: 'Proof not verified'
 *
 * @category Errors
 * @category generated
 */
export class ProofNotVerifiedError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'ProofNotVerified'
  constructor() {
    super('Proof not verified')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProofNotVerifiedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new ProofNotVerifiedError())
createErrorFromNameLookup.set(
  'ProofNotVerified',
  () => new ProofNotVerifiedError()
)

/**
 * InvalidProofSize: 'Invalid proof size'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProofSizeError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidProofSize'
  constructor() {
    super('Invalid proof size')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProofSizeError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InvalidProofSizeError())
createErrorFromNameLookup.set(
  'InvalidProofSize',
  () => new InvalidProofSizeError()
)

/**
 * InvalidProof: 'Invalid proof'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProofError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'InvalidProof'
  constructor() {
    super('Invalid proof')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProofError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new InvalidProofError())
createErrorFromNameLookup.set('InvalidProof', () => new InvalidProofError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
