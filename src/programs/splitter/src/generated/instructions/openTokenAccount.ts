/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category OpenTokenAccount
 * @category generated
 */
export type OpenTokenAccountInstructionArgs = {
  poolBump: number
  proofBump: number
}
/**
 * @category Instructions
 * @category OpenTokenAccount
 * @category generated
 */
const openTokenAccountStruct = new beet.BeetArgsStruct<
  OpenTokenAccountInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['poolBump', beet.u8],
    ['proofBump', beet.u8],
  ],
  'OpenTokenAccountInstructionArgs'
)
/**
 * Accounts required by the _openTokenAccount_ instruction
 * @category Instructions
 * @category OpenTokenAccount
 * @category generated
 */
export type OpenTokenAccountInstructionAccounts = {
  pool: web3.PublicKey
  proof: web3.PublicKey
  commitmentVault: web3.PublicKey
  mint: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
}

const openTokenAccountInstructionDiscriminator = [
  77, 240, 240, 35, 150, 89, 234, 157,
]

/**
 * Creates a _OpenTokenAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category OpenTokenAccount
 * @category generated
 */
export function createOpenTokenAccountInstruction(
  accounts: OpenTokenAccountInstructionAccounts,
  args: OpenTokenAccountInstructionArgs
) {
  const { pool, proof, commitmentVault, mint, authority, payer } = accounts

  const [data] = openTokenAccountStruct.serialize({
    instructionDiscriminator: openTokenAccountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: pool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: proof,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: commitmentVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'spLit2eb13Tz93if6aJM136nUWki5PVUsoEjcUjwpwW'
    ),
    keys,
    data,
  })
  return ix
}
