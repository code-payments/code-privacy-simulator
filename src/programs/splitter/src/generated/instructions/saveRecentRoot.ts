/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SaveRecentRoot
 * @category generated
 */
export type SaveRecentRootInstructionArgs = {
  poolBump: number
}
/**
 * @category Instructions
 * @category SaveRecentRoot
 * @category generated
 */
const saveRecentRootStruct = new beet.BeetArgsStruct<
  SaveRecentRootInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['poolBump', beet.u8],
  ],
  'SaveRecentRootInstructionArgs'
)
/**
 * Accounts required by the _saveRecentRoot_ instruction
 * @category Instructions
 * @category SaveRecentRoot
 * @category generated
 */
export type SaveRecentRootInstructionAccounts = {
  pool: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
}

const saveRecentRootInstructionDiscriminator = [
  163, 45, 123, 32, 127, 86, 42, 189,
]

/**
 * Creates a _SaveRecentRoot_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SaveRecentRoot
 * @category generated
 */
export function createSaveRecentRootInstruction(
  accounts: SaveRecentRootInstructionAccounts,
  args: SaveRecentRootInstructionArgs
) {
  const { pool, authority, payer } = accounts

  const [data] = saveRecentRootStruct.serialize({
    instructionDiscriminator: saveRecentRootInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: pool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'spLit2eb13Tz93if6aJM136nUWki5PVUsoEjcUjwpwW'
    ),
    keys,
    data,
  })
  return ix
}
