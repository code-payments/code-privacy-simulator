/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category TransferWithCommitment
 * @category generated
 */
export type TransferWithCommitmentInstructionArgs = {
  poolBump: number
  amount: beet.bignum
  transcript: number[] /* size: 32 */
  recentRoot: number[] /* size: 32 */
}
/**
 * @category Instructions
 * @category TransferWithCommitment
 * @category generated
 */
const transferWithCommitmentStruct = new beet.BeetArgsStruct<
  TransferWithCommitmentInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['poolBump', beet.u8],
    ['amount', beet.u64],
    ['transcript', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['recentRoot', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  'TransferWithCommitmentInstructionArgs'
)
/**
 * Accounts required by the _transferWithCommitment_ instruction
 * @category Instructions
 * @category TransferWithCommitment
 * @category generated
 */
export type TransferWithCommitmentInstructionAccounts = {
  pool: web3.PublicKey
  vault: web3.PublicKey
  destination: web3.PublicKey
  commitment: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
}

const transferWithCommitmentInstructionDiscriminator = [
  177, 247, 125, 208, 153, 166, 205, 120,
]

/**
 * Creates a _TransferWithCommitment_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category TransferWithCommitment
 * @category generated
 */
export function createTransferWithCommitmentInstruction(
  accounts: TransferWithCommitmentInstructionAccounts,
  args: TransferWithCommitmentInstructionArgs
) {
  const { pool, vault, destination, commitment, authority, payer } = accounts

  const [data] = transferWithCommitmentStruct.serialize({
    instructionDiscriminator: transferWithCommitmentInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: pool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: destination,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: commitment,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'spLit2eb13Tz93if6aJM136nUWki5PVUsoEjcUjwpwW'
    ),
    keys,
    data,
  })
  return ix
}
